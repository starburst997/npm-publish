name: "NPM Version Publish"
description: "Version, build, and publish NPM packages to the NPM registry"
author: "JD Boivin"

inputs:
  node-version:
    description: "Node.js version to use"
    required: false
    default: "24"

  registry-url:
    description: "NPM registry URL"
    required: false
    default: "https://registry.npmjs.org"

  version:
    description: "Version to set in package.json (optional, skip if not provided)"
    required: false
    default: ""

  build-command:
    description: "Build script name from package.json (optional)"
    required: false
    default: ""

  token:
    description: "NPM authentication token (required unless using provenance with OIDC)"
    required: false
    default: ""

  provenance:
    description: "Enable provenance statements (requires OIDC, id-token: write permission)"
    required: false
    default: "true"

  ignore-scripts:
    description: "Run npm ci with --ignore-scripts flag"
    required: false
    default: "true"

runs:
  using: "composite"
  steps:
    - name: Detect package manager
      id: detect-pm
      shell: bash
      run: |
        if [ -f "pnpm-lock.yaml" ]; then
          echo "pm=pnpm" >> $GITHUB_OUTPUT
          echo "lockfile=pnpm-lock.yaml" >> $GITHUB_OUTPUT
        elif [ -f "yarn.lock" ]; then
          echo "pm=yarn" >> $GITHUB_OUTPUT
          echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
        elif [ -f "package-lock.json" ]; then
          echo "pm=npm" >> $GITHUB_OUTPUT
          echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
        else
          echo "pm=npm" >> $GITHUB_OUTPUT
          echo "lockfile=" >> $GITHUB_OUTPUT
        fi

    - name: Setup pnpm
      if: steps.detect-pm.outputs.pm == 'pnpm'
      uses: pnpm/action-setup@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.registry-url }}
        cache: ${{ steps.detect-pm.outputs.pm }}

    - name: Install dependencies
      shell: bash
      run: |
        PM="${{ steps.detect-pm.outputs.pm }}"
        IGNORE_SCRIPTS="${{ inputs.ignore-scripts }}"

        if [ "$PM" == "pnpm" ]; then
          if [ "$IGNORE_SCRIPTS" == "true" ]; then
            pnpm install --frozen-lockfile --ignore-scripts
          else
            pnpm install --frozen-lockfile
          fi
        elif [ "$PM" == "yarn" ]; then
          if [ "$IGNORE_SCRIPTS" == "true" ]; then
            yarn install --frozen-lockfile --ignore-scripts
          else
            yarn install --frozen-lockfile
          fi
        else
          if [ "$IGNORE_SCRIPTS" == "true" ]; then
            npm ci --ignore-scripts
          else
            npm ci
          fi
        fi

    - name: Update package version
      if: inputs.version != ''
      shell: bash
      run: npm version ${{ inputs.version }} --no-git-tag-version

    - name: Build package
      shell: bash
      run: |
        PM="${{ steps.detect-pm.outputs.pm }}"
        BUILD_CMD="${{ inputs.build-command }}"

        if [ -n "$BUILD_CMD" ] && grep -q "\"$BUILD_CMD\":" package.json 2>/dev/null; then
          echo "Running build command: $BUILD_CMD"
          if [ "$PM" == "pnpm" ]; then
            pnpm run $BUILD_CMD
          elif [ "$PM" == "yarn" ]; then
            yarn run $BUILD_CMD
          else
            npm run $BUILD_CMD
          fi
        elif [ -n "$BUILD_CMD" ]; then
          echo "Build command '$BUILD_CMD' not found in package.json, skipping..."
        else
          echo "No build command specified, skipping..."
        fi

    - name: Publish to NPM (OIDC)
      if: inputs.provenance == 'true'
      shell: bash
      run: npm publish

    - name: Publish to NPM (Token)
      if: inputs.provenance != 'true'
      shell: bash
      env:
        NODE_AUTH_TOKEN: ${{ inputs.token }}
      run: npm publish

branding:
  icon: "package"
  color: "red"
